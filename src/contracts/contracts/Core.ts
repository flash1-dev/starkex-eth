/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface CoreInterface extends utils.Interface {
  functions: {
    "DEPOSIT_CANCEL_DELAY()": FunctionFragment;
    "FREEZE_GRACE_PERIOD()": FunctionFragment;
    "MAIN_GOVERNANCE_INFO_TAG()": FunctionFragment;
    "MAX_FORCED_ACTIONS_REQS_PER_BLOCK()": FunctionFragment;
    "MAX_VERIFIER_COUNT()": FunctionFragment;
    "UNFREEZE_DELAY()": FunctionFragment;
    "VERIFIER_REMOVAL_DELAY()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "announceAvailabilityVerifierRemovalIntent(address)": FunctionFragment;
    "announceVerifierRemovalIntent(address)": FunctionFragment;
    "applyAssetConfigurationChange(uint256,bytes32)": FunctionFragment;
    "applyGlobalConfigurationChange(bytes32)": FunctionFragment;
    "calculateAssetIdWithTokenId(uint256,uint256)": FunctionFragment;
    "calculateMintableAssetId(uint256,bytes)": FunctionFragment;
    "configurationDelay()": FunctionFragment;
    "configurationHash(uint256)": FunctionFragment;
    "deposit(uint256,uint256,uint256)": FunctionFragment;
    "deposit(uint256,uint256,uint256,uint256)": FunctionFragment;
    "depositCancel(uint256,uint256,uint256)": FunctionFragment;
    "depositERC1155(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "depositERC20(uint256,uint256,uint256,uint256)": FunctionFragment;
    "depositEth(uint256,uint256,uint256)": FunctionFragment;
    "depositNft(uint256,uint256,uint256,uint256)": FunctionFragment;
    "depositNftReclaim(uint256,uint256,uint256,uint256)": FunctionFragment;
    "depositReclaim(uint256,uint256,uint256)": FunctionFragment;
    "depositWithTokenId(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "depositWithTokenIdReclaim(uint256,uint256,uint256,uint256)": FunctionFragment;
    "escape(uint256,uint256,uint256)": FunctionFragment;
    "forcedTradeRequest(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256,bytes,bool)": FunctionFragment;
    "forcedWithdrawalRequest(uint256,uint256,uint256,bool)": FunctionFragment;
    "freezeRequest(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)": FunctionFragment;
    "freezeRequest(uint256,uint256,uint256)": FunctionFragment;
    "getActionCount()": FunctionFragment;
    "getActionHashByIndex(uint256)": FunctionFragment;
    "getAssetInfo(uint256)": FunctionFragment;
    "getCancellationRequest(uint256,uint256,uint256)": FunctionFragment;
    "getDepositBalance(uint256,uint256,uint256)": FunctionFragment;
    "getEthKey(uint256)": FunctionFragment;
    "getForcedTradeRequest(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)": FunctionFragment;
    "getForcedWithdrawalRequest(uint256,uint256,uint256)": FunctionFragment;
    "getGlobalConfigCode()": FunctionFragment;
    "getLastBatchId()": FunctionFragment;
    "getOrderRoot()": FunctionFragment;
    "getOrderTreeHeight()": FunctionFragment;
    "getQuantizedDepositBalance(uint256,uint256,uint256)": FunctionFragment;
    "getQuantum(uint256)": FunctionFragment;
    "getRegisteredAvailabilityVerifiers()": FunctionFragment;
    "getRegisteredVerifiers()": FunctionFragment;
    "getRollupTreeHeight()": FunctionFragment;
    "getRollupVaultRoot()": FunctionFragment;
    "getSequenceNumber()": FunctionFragment;
    "getSubContract(bytes4)": FunctionFragment;
    "getSystemAssetType()": FunctionFragment;
    "getValidiumTreeHeight()": FunctionFragment;
    "getValidiumVaultRoot()": FunctionFragment;
    "getWithdrawalBalance(uint256,uint256)": FunctionFragment;
    "globalConfigurationHash()": FunctionFragment;
    "handlingContractId(bytes4)": FunctionFragment;
    "initialize(bytes)": FunctionFragment;
    "isAssetRegistered(uint256)": FunctionFragment;
    "isAvailabilityVerifier(address)": FunctionFragment;
    "isFrozen()": FunctionFragment;
    "isOperator(address)": FunctionFragment;
    "isTokenAdmin(address)": FunctionFragment;
    "isUserAdmin(address)": FunctionFragment;
    "isVerifier(address)": FunctionFragment;
    "mainAcceptGovernance()": FunctionFragment;
    "mainCancelNomination()": FunctionFragment;
    "mainIsGovernor(address)": FunctionFragment;
    "mainNominateNewGovernor(address)": FunctionFragment;
    "mainRemoveGovernor(address)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "registerAndDepositERC20(address,uint256,bytes,uint256,uint256,uint256)": FunctionFragment;
    "registerAndDepositEth(address,uint256,bytes,uint256,uint256)": FunctionFragment;
    "registerAssetConfigurationChange(uint256,bytes32)": FunctionFragment;
    "registerAvailabilityVerifier(address,string)": FunctionFragment;
    "registerEthAddress(address,uint256,bytes)": FunctionFragment;
    "registerGlobalConfigurationChange(bytes32)": FunctionFragment;
    "registerOperator(address)": FunctionFragment;
    "registerSender(uint256,bytes)": FunctionFragment;
    "registerSystemAssetType(uint256,bytes)": FunctionFragment;
    "registerToken(uint256,bytes)": FunctionFragment;
    "registerToken(uint256,bytes,uint256)": FunctionFragment;
    "registerTokenAdmin(address)": FunctionFragment;
    "registerUser(address,uint256,bytes)": FunctionFragment;
    "registerUserAdmin(address)": FunctionFragment;
    "registerVerifier(address,string)": FunctionFragment;
    "removeAssetConfigurationChange(uint256,bytes32)": FunctionFragment;
    "removeAvailabilityVerifier(address)": FunctionFragment;
    "removeGlobalConfigurationChange(bytes32)": FunctionFragment;
    "removeVerifier(address)": FunctionFragment;
    "unFreeze()": FunctionFragment;
    "unregisterOperator(address)": FunctionFragment;
    "unregisterTokenAdmin(address)": FunctionFragment;
    "unregisterUserAdmin(address)": FunctionFragment;
    "updateState(uint256[],uint256[])": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawAndMint(uint256,uint256,bytes)": FunctionFragment;
    "withdrawNft(uint256,uint256,uint256)": FunctionFragment;
    "withdrawWithTokenId(uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEPOSIT_CANCEL_DELAY"
      | "FREEZE_GRACE_PERIOD"
      | "MAIN_GOVERNANCE_INFO_TAG"
      | "MAX_FORCED_ACTIONS_REQS_PER_BLOCK"
      | "MAX_VERIFIER_COUNT"
      | "UNFREEZE_DELAY"
      | "VERIFIER_REMOVAL_DELAY"
      | "VERSION"
      | "announceAvailabilityVerifierRemovalIntent"
      | "announceVerifierRemovalIntent"
      | "applyAssetConfigurationChange"
      | "applyGlobalConfigurationChange"
      | "calculateAssetIdWithTokenId"
      | "calculateMintableAssetId"
      | "configurationDelay"
      | "configurationHash"
      | "deposit(uint256,uint256,uint256)"
      | "deposit(uint256,uint256,uint256,uint256)"
      | "depositCancel"
      | "depositERC1155"
      | "depositERC20"
      | "depositEth"
      | "depositNft"
      | "depositNftReclaim"
      | "depositReclaim"
      | "depositWithTokenId"
      | "depositWithTokenIdReclaim"
      | "escape"
      | "forcedTradeRequest"
      | "forcedWithdrawalRequest"
      | "freezeRequest(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)"
      | "freezeRequest(uint256,uint256,uint256)"
      | "getActionCount"
      | "getActionHashByIndex"
      | "getAssetInfo"
      | "getCancellationRequest"
      | "getDepositBalance"
      | "getEthKey"
      | "getForcedTradeRequest"
      | "getForcedWithdrawalRequest"
      | "getGlobalConfigCode"
      | "getLastBatchId"
      | "getOrderRoot"
      | "getOrderTreeHeight"
      | "getQuantizedDepositBalance"
      | "getQuantum"
      | "getRegisteredAvailabilityVerifiers"
      | "getRegisteredVerifiers"
      | "getRollupTreeHeight"
      | "getRollupVaultRoot"
      | "getSequenceNumber"
      | "getSubContract"
      | "getSystemAssetType"
      | "getValidiumTreeHeight"
      | "getValidiumVaultRoot"
      | "getWithdrawalBalance"
      | "globalConfigurationHash"
      | "handlingContractId"
      | "initialize"
      | "isAssetRegistered"
      | "isAvailabilityVerifier"
      | "isFrozen"
      | "isOperator"
      | "isTokenAdmin"
      | "isUserAdmin"
      | "isVerifier"
      | "mainAcceptGovernance"
      | "mainCancelNomination"
      | "mainIsGovernor"
      | "mainNominateNewGovernor"
      | "mainRemoveGovernor"
      | "onERC721Received"
      | "registerAndDepositERC20"
      | "registerAndDepositEth"
      | "registerAssetConfigurationChange"
      | "registerAvailabilityVerifier"
      | "registerEthAddress"
      | "registerGlobalConfigurationChange"
      | "registerOperator"
      | "registerSender"
      | "registerSystemAssetType"
      | "registerToken(uint256,bytes)"
      | "registerToken(uint256,bytes,uint256)"
      | "registerTokenAdmin"
      | "registerUser"
      | "registerUserAdmin"
      | "registerVerifier"
      | "removeAssetConfigurationChange"
      | "removeAvailabilityVerifier"
      | "removeGlobalConfigurationChange"
      | "removeVerifier"
      | "unFreeze"
      | "unregisterOperator"
      | "unregisterTokenAdmin"
      | "unregisterUserAdmin"
      | "updateState"
      | "withdraw"
      | "withdrawAndMint"
      | "withdrawNft"
      | "withdrawWithTokenId"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEPOSIT_CANCEL_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FREEZE_GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAIN_GOVERNANCE_INFO_TAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FORCED_ACTIONS_REQS_PER_BLOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_VERIFIER_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNFREEZE_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFIER_REMOVAL_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "announceAvailabilityVerifierRemovalIntent",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "announceVerifierRemovalIntent",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "applyAssetConfigurationChange",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "applyGlobalConfigurationChange",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAssetIdWithTokenId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateMintableAssetId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "configurationDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configurationHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCancel",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC1155",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEth",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNft",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNftReclaim",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositReclaim",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithTokenId",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithTokenIdReclaim",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "escape",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "forcedTradeRequest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "forcedWithdrawalRequest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeRequest(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeRequest(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActionHashByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCancellationRequest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositBalance",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthKey",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getForcedTradeRequest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getForcedWithdrawalRequest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalConfigCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastBatchId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderTreeHeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuantizedDepositBalance",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuantum",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredAvailabilityVerifiers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredVerifiers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRollupTreeHeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRollupVaultRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSequenceNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubContract",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSystemAssetType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidiumTreeHeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidiumVaultRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalBalance",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalConfigurationHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handlingContractId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAssetRegistered",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAvailabilityVerifier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "isFrozen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerifier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mainAcceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mainCancelNomination",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mainIsGovernor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mainNominateNewGovernor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mainRemoveGovernor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndDepositERC20",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndDepositEth",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAssetConfigurationChange",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAvailabilityVerifier",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerEthAddress",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerGlobalConfigurationChange",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSender",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSystemAssetType",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerToken(uint256,bytes)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerToken(uint256,bytes,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTokenAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUserAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVerifier",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAssetConfigurationChange",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAvailabilityVerifier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGlobalConfigurationChange",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVerifier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unFreeze", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unregisterOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterTokenAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterUserAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateState",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndMint",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNft",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawWithTokenId",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEPOSIT_CANCEL_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FREEZE_GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAIN_GOVERNANCE_INFO_TAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FORCED_ACTIONS_REQS_PER_BLOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_VERIFIER_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNFREEZE_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFIER_REMOVAL_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "announceAvailabilityVerifierRemovalIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceVerifierRemovalIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyAssetConfigurationChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyGlobalConfigurationChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateAssetIdWithTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateMintableAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configurationDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configurationHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositNftReclaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositReclaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWithTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWithTokenIdReclaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escape", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forcedTradeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forcedWithdrawalRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeRequest(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeRequest(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionHashByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCancellationRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEthKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getForcedTradeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getForcedWithdrawalRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalConfigCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastBatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderTreeHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuantizedDepositBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getQuantum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredAvailabilityVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRollupTreeHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRollupVaultRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSequenceNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSystemAssetType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidiumTreeHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidiumVaultRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalConfigurationHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handlingContractId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAssetRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAvailabilityVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFrozen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVerifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mainAcceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainCancelNomination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainIsGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainNominateNewGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainRemoveGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAndDepositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAndDepositEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAssetConfigurationChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAvailabilityVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerEthAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerGlobalConfigurationChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSystemAssetType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerToken(uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerToken(uint256,bytes,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTokenAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUserAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAssetConfigurationChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAvailabilityVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGlobalConfigurationChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unFreeze", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unregisterOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterTokenAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterUserAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawWithTokenId",
    data: BytesLike
  ): Result;

  events: {
    "LogAssetConfigurationApplied(uint256,bytes32)": EventFragment;
    "LogAssetConfigurationRegistered(uint256,bytes32)": EventFragment;
    "LogAssetConfigurationRemoved(uint256,bytes32)": EventFragment;
    "LogAssetWithdrawalAllowed(uint256,uint256,uint256)": EventFragment;
    "LogDeposit(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LogDepositCancel(uint256,uint256,uint256)": EventFragment;
    "LogDepositCancelReclaimed(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LogDepositNftCancelReclaimed(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LogDepositWithTokenId(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LogDepositWithTokenIdCancelReclaimed(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LogForcedTradeRequest(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)": EventFragment;
    "LogForcedWithdrawalRequest(uint256,uint256,uint256)": EventFragment;
    "LogFrozen()": EventFragment;
    "LogGlobalConfigurationApplied(bytes32)": EventFragment;
    "LogGlobalConfigurationRegistered(bytes32)": EventFragment;
    "LogGlobalConfigurationRemoved(bytes32)": EventFragment;
    "LogMintWithdrawalPerformed(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LogMintableWithdrawalAllowed(uint256,uint256,uint256)": EventFragment;
    "LogNewGovernorAccepted(address)": EventFragment;
    "LogNftDeposit(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LogNftWithdrawalAllowed(uint256,uint256)": EventFragment;
    "LogNftWithdrawalPerformed(uint256,uint256,uint256,uint256,address)": EventFragment;
    "LogNominatedGovernor(address)": EventFragment;
    "LogNominationCancelled()": EventFragment;
    "LogOperatorAdded(address)": EventFragment;
    "LogOperatorRemoved(address)": EventFragment;
    "LogRegistered(address,string)": EventFragment;
    "LogRemovalIntent(address,string)": EventFragment;
    "LogRemoved(address,string)": EventFragment;
    "LogRemovedGovernor(address)": EventFragment;
    "LogStateTransitionFact(bytes32)": EventFragment;
    "LogSystemAssetType(uint256)": EventFragment;
    "LogTokenAdminAdded(address)": EventFragment;
    "LogTokenAdminRemoved(address)": EventFragment;
    "LogTokenRegistered(uint256,bytes,uint256)": EventFragment;
    "LogUnFrozen()": EventFragment;
    "LogUpdateState(uint256,uint256)": EventFragment;
    "LogUserAdminAdded(address)": EventFragment;
    "LogUserAdminRemoved(address)": EventFragment;
    "LogUserRegistered(address,uint256,address)": EventFragment;
    "LogWithdrawalAllowed(uint256,uint256,uint256,uint256)": EventFragment;
    "LogWithdrawalPerformed(uint256,uint256,uint256,uint256,address)": EventFragment;
    "LogWithdrawalWithTokenIdPerformed(uint256,uint256,uint256,uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "LogAssetConfigurationApplied"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogAssetConfigurationRegistered"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogAssetConfigurationRemoved"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAssetWithdrawalAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepositCancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepositCancelReclaimed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogDepositNftCancelReclaimed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepositWithTokenId"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogDepositWithTokenIdCancelReclaimed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogForcedTradeRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogForcedWithdrawalRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogFrozen"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogGlobalConfigurationApplied"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogGlobalConfigurationRegistered"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogGlobalConfigurationRemoved"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMintWithdrawalPerformed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogMintableWithdrawalAllowed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNewGovernorAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNftDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNftWithdrawalAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNftWithdrawalPerformed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNominatedGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNominationCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogOperatorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogOperatorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemovalIntent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemovedGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogStateTransitionFact"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSystemAssetType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTokenAdminAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTokenAdminRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTokenRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUnFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUpdateState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUserAdminAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUserAdminRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUserRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdrawalAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdrawalPerformed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogWithdrawalWithTokenIdPerformed"
  ): EventFragment;
}

export interface LogAssetConfigurationAppliedEventObject {
  assetId: BigNumber;
  configHash: string;
}
export type LogAssetConfigurationAppliedEvent = TypedEvent<
  [BigNumber, string],
  LogAssetConfigurationAppliedEventObject
>;

export type LogAssetConfigurationAppliedEventFilter =
  TypedEventFilter<LogAssetConfigurationAppliedEvent>;

export interface LogAssetConfigurationRegisteredEventObject {
  assetId: BigNumber;
  configHash: string;
}
export type LogAssetConfigurationRegisteredEvent = TypedEvent<
  [BigNumber, string],
  LogAssetConfigurationRegisteredEventObject
>;

export type LogAssetConfigurationRegisteredEventFilter =
  TypedEventFilter<LogAssetConfigurationRegisteredEvent>;

export interface LogAssetConfigurationRemovedEventObject {
  assetId: BigNumber;
  configHash: string;
}
export type LogAssetConfigurationRemovedEvent = TypedEvent<
  [BigNumber, string],
  LogAssetConfigurationRemovedEventObject
>;

export type LogAssetConfigurationRemovedEventFilter =
  TypedEventFilter<LogAssetConfigurationRemovedEvent>;

export interface LogAssetWithdrawalAllowedEventObject {
  ownerKey: BigNumber;
  assetId: BigNumber;
  quantizedAmount: BigNumber;
}
export type LogAssetWithdrawalAllowedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LogAssetWithdrawalAllowedEventObject
>;

export type LogAssetWithdrawalAllowedEventFilter =
  TypedEventFilter<LogAssetWithdrawalAllowedEvent>;

export interface LogDepositEventObject {
  depositorEthKey: string;
  starkKey: BigNumber;
  vaultId: BigNumber;
  assetType: BigNumber;
  nonQuantizedAmount: BigNumber;
  quantizedAmount: BigNumber;
}
export type LogDepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LogDepositEventObject
>;

export type LogDepositEventFilter = TypedEventFilter<LogDepositEvent>;

export interface LogDepositCancelEventObject {
  starkKey: BigNumber;
  vaultId: BigNumber;
  assetId: BigNumber;
}
export type LogDepositCancelEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LogDepositCancelEventObject
>;

export type LogDepositCancelEventFilter =
  TypedEventFilter<LogDepositCancelEvent>;

export interface LogDepositCancelReclaimedEventObject {
  starkKey: BigNumber;
  vaultId: BigNumber;
  assetType: BigNumber;
  nonQuantizedAmount: BigNumber;
  quantizedAmount: BigNumber;
}
export type LogDepositCancelReclaimedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LogDepositCancelReclaimedEventObject
>;

export type LogDepositCancelReclaimedEventFilter =
  TypedEventFilter<LogDepositCancelReclaimedEvent>;

export interface LogDepositNftCancelReclaimedEventObject {
  starkKey: BigNumber;
  vaultId: BigNumber;
  assetType: BigNumber;
  tokenId: BigNumber;
  assetId: BigNumber;
}
export type LogDepositNftCancelReclaimedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LogDepositNftCancelReclaimedEventObject
>;

export type LogDepositNftCancelReclaimedEventFilter =
  TypedEventFilter<LogDepositNftCancelReclaimedEvent>;

export interface LogDepositWithTokenIdEventObject {
  depositorEthKey: string;
  starkKey: BigNumber;
  vaultId: BigNumber;
  assetType: BigNumber;
  tokenId: BigNumber;
  assetId: BigNumber;
  nonQuantizedAmount: BigNumber;
  quantizedAmount: BigNumber;
}
export type LogDepositWithTokenIdEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  LogDepositWithTokenIdEventObject
>;

export type LogDepositWithTokenIdEventFilter =
  TypedEventFilter<LogDepositWithTokenIdEvent>;

export interface LogDepositWithTokenIdCancelReclaimedEventObject {
  starkKey: BigNumber;
  vaultId: BigNumber;
  assetType: BigNumber;
  tokenId: BigNumber;
  assetId: BigNumber;
  nonQuantizedAmount: BigNumber;
  quantizedAmount: BigNumber;
}
export type LogDepositWithTokenIdCancelReclaimedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LogDepositWithTokenIdCancelReclaimedEventObject
>;

export type LogDepositWithTokenIdCancelReclaimedEventFilter =
  TypedEventFilter<LogDepositWithTokenIdCancelReclaimedEvent>;

export interface LogForcedTradeRequestEventObject {
  starkKeyA: BigNumber;
  starkKeyB: BigNumber;
  vaultIdA: BigNumber;
  vaultIdB: BigNumber;
  collateralAssetId: BigNumber;
  syntheticAssetId: BigNumber;
  amountCollateral: BigNumber;
  amountSynthetic: BigNumber;
  aIsBuyingSynthetic: boolean;
  nonce: BigNumber;
}
export type LogForcedTradeRequestEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber
  ],
  LogForcedTradeRequestEventObject
>;

export type LogForcedTradeRequestEventFilter =
  TypedEventFilter<LogForcedTradeRequestEvent>;

export interface LogForcedWithdrawalRequestEventObject {
  starkKey: BigNumber;
  vaultId: BigNumber;
  quantizedAmount: BigNumber;
}
export type LogForcedWithdrawalRequestEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LogForcedWithdrawalRequestEventObject
>;

export type LogForcedWithdrawalRequestEventFilter =
  TypedEventFilter<LogForcedWithdrawalRequestEvent>;

export interface LogFrozenEventObject {}
export type LogFrozenEvent = TypedEvent<[], LogFrozenEventObject>;

export type LogFrozenEventFilter = TypedEventFilter<LogFrozenEvent>;

export interface LogGlobalConfigurationAppliedEventObject {
  configHash: string;
}
export type LogGlobalConfigurationAppliedEvent = TypedEvent<
  [string],
  LogGlobalConfigurationAppliedEventObject
>;

export type LogGlobalConfigurationAppliedEventFilter =
  TypedEventFilter<LogGlobalConfigurationAppliedEvent>;

export interface LogGlobalConfigurationRegisteredEventObject {
  configHash: string;
}
export type LogGlobalConfigurationRegisteredEvent = TypedEvent<
  [string],
  LogGlobalConfigurationRegisteredEventObject
>;

export type LogGlobalConfigurationRegisteredEventFilter =
  TypedEventFilter<LogGlobalConfigurationRegisteredEvent>;

export interface LogGlobalConfigurationRemovedEventObject {
  configHash: string;
}
export type LogGlobalConfigurationRemovedEvent = TypedEvent<
  [string],
  LogGlobalConfigurationRemovedEventObject
>;

export type LogGlobalConfigurationRemovedEventFilter =
  TypedEventFilter<LogGlobalConfigurationRemovedEvent>;

export interface LogMintWithdrawalPerformedEventObject {
  ownerKey: BigNumber;
  assetType: BigNumber;
  nonQuantizedAmount: BigNumber;
  quantizedAmount: BigNumber;
  assetId: BigNumber;
}
export type LogMintWithdrawalPerformedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LogMintWithdrawalPerformedEventObject
>;

export type LogMintWithdrawalPerformedEventFilter =
  TypedEventFilter<LogMintWithdrawalPerformedEvent>;

export interface LogMintableWithdrawalAllowedEventObject {
  ownerKey: BigNumber;
  assetId: BigNumber;
  quantizedAmount: BigNumber;
}
export type LogMintableWithdrawalAllowedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LogMintableWithdrawalAllowedEventObject
>;

export type LogMintableWithdrawalAllowedEventFilter =
  TypedEventFilter<LogMintableWithdrawalAllowedEvent>;

export interface LogNewGovernorAcceptedEventObject {
  acceptedGovernor: string;
}
export type LogNewGovernorAcceptedEvent = TypedEvent<
  [string],
  LogNewGovernorAcceptedEventObject
>;

export type LogNewGovernorAcceptedEventFilter =
  TypedEventFilter<LogNewGovernorAcceptedEvent>;

export interface LogNftDepositEventObject {
  depositorEthKey: string;
  starkKey: BigNumber;
  vaultId: BigNumber;
  assetType: BigNumber;
  tokenId: BigNumber;
  assetId: BigNumber;
}
export type LogNftDepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LogNftDepositEventObject
>;

export type LogNftDepositEventFilter = TypedEventFilter<LogNftDepositEvent>;

export interface LogNftWithdrawalAllowedEventObject {
  ownerKey: BigNumber;
  assetId: BigNumber;
}
export type LogNftWithdrawalAllowedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogNftWithdrawalAllowedEventObject
>;

export type LogNftWithdrawalAllowedEventFilter =
  TypedEventFilter<LogNftWithdrawalAllowedEvent>;

export interface LogNftWithdrawalPerformedEventObject {
  ownerKey: BigNumber;
  assetType: BigNumber;
  tokenId: BigNumber;
  assetId: BigNumber;
  recipient: string;
}
export type LogNftWithdrawalPerformedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string],
  LogNftWithdrawalPerformedEventObject
>;

export type LogNftWithdrawalPerformedEventFilter =
  TypedEventFilter<LogNftWithdrawalPerformedEvent>;

export interface LogNominatedGovernorEventObject {
  nominatedGovernor: string;
}
export type LogNominatedGovernorEvent = TypedEvent<
  [string],
  LogNominatedGovernorEventObject
>;

export type LogNominatedGovernorEventFilter =
  TypedEventFilter<LogNominatedGovernorEvent>;

export interface LogNominationCancelledEventObject {}
export type LogNominationCancelledEvent = TypedEvent<
  [],
  LogNominationCancelledEventObject
>;

export type LogNominationCancelledEventFilter =
  TypedEventFilter<LogNominationCancelledEvent>;

export interface LogOperatorAddedEventObject {
  operator: string;
}
export type LogOperatorAddedEvent = TypedEvent<
  [string],
  LogOperatorAddedEventObject
>;

export type LogOperatorAddedEventFilter =
  TypedEventFilter<LogOperatorAddedEvent>;

export interface LogOperatorRemovedEventObject {
  operator: string;
}
export type LogOperatorRemovedEvent = TypedEvent<
  [string],
  LogOperatorRemovedEventObject
>;

export type LogOperatorRemovedEventFilter =
  TypedEventFilter<LogOperatorRemovedEvent>;

export interface LogRegisteredEventObject {
  entry: string;
  entryId: string;
}
export type LogRegisteredEvent = TypedEvent<
  [string, string],
  LogRegisteredEventObject
>;

export type LogRegisteredEventFilter = TypedEventFilter<LogRegisteredEvent>;

export interface LogRemovalIntentEventObject {
  entry: string;
  entryId: string;
}
export type LogRemovalIntentEvent = TypedEvent<
  [string, string],
  LogRemovalIntentEventObject
>;

export type LogRemovalIntentEventFilter =
  TypedEventFilter<LogRemovalIntentEvent>;

export interface LogRemovedEventObject {
  entry: string;
  entryId: string;
}
export type LogRemovedEvent = TypedEvent<
  [string, string],
  LogRemovedEventObject
>;

export type LogRemovedEventFilter = TypedEventFilter<LogRemovedEvent>;

export interface LogRemovedGovernorEventObject {
  removedGovernor: string;
}
export type LogRemovedGovernorEvent = TypedEvent<
  [string],
  LogRemovedGovernorEventObject
>;

export type LogRemovedGovernorEventFilter =
  TypedEventFilter<LogRemovedGovernorEvent>;

export interface LogStateTransitionFactEventObject {
  stateTransitionFact: string;
}
export type LogStateTransitionFactEvent = TypedEvent<
  [string],
  LogStateTransitionFactEventObject
>;

export type LogStateTransitionFactEventFilter =
  TypedEventFilter<LogStateTransitionFactEvent>;

export interface LogSystemAssetTypeEventObject {
  assetType: BigNumber;
}
export type LogSystemAssetTypeEvent = TypedEvent<
  [BigNumber],
  LogSystemAssetTypeEventObject
>;

export type LogSystemAssetTypeEventFilter =
  TypedEventFilter<LogSystemAssetTypeEvent>;

export interface LogTokenAdminAddedEventObject {
  tokenAdmin: string;
}
export type LogTokenAdminAddedEvent = TypedEvent<
  [string],
  LogTokenAdminAddedEventObject
>;

export type LogTokenAdminAddedEventFilter =
  TypedEventFilter<LogTokenAdminAddedEvent>;

export interface LogTokenAdminRemovedEventObject {
  tokenAdmin: string;
}
export type LogTokenAdminRemovedEvent = TypedEvent<
  [string],
  LogTokenAdminRemovedEventObject
>;

export type LogTokenAdminRemovedEventFilter =
  TypedEventFilter<LogTokenAdminRemovedEvent>;

export interface LogTokenRegisteredEventObject {
  assetType: BigNumber;
  assetInfo: string;
  quantum: BigNumber;
}
export type LogTokenRegisteredEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  LogTokenRegisteredEventObject
>;

export type LogTokenRegisteredEventFilter =
  TypedEventFilter<LogTokenRegisteredEvent>;

export interface LogUnFrozenEventObject {}
export type LogUnFrozenEvent = TypedEvent<[], LogUnFrozenEventObject>;

export type LogUnFrozenEventFilter = TypedEventFilter<LogUnFrozenEvent>;

export interface LogUpdateStateEventObject {
  sequenceNumber: BigNumber;
  batchId: BigNumber;
}
export type LogUpdateStateEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogUpdateStateEventObject
>;

export type LogUpdateStateEventFilter = TypedEventFilter<LogUpdateStateEvent>;

export interface LogUserAdminAddedEventObject {
  userAdmin: string;
}
export type LogUserAdminAddedEvent = TypedEvent<
  [string],
  LogUserAdminAddedEventObject
>;

export type LogUserAdminAddedEventFilter =
  TypedEventFilter<LogUserAdminAddedEvent>;

export interface LogUserAdminRemovedEventObject {
  userAdmin: string;
}
export type LogUserAdminRemovedEvent = TypedEvent<
  [string],
  LogUserAdminRemovedEventObject
>;

export type LogUserAdminRemovedEventFilter =
  TypedEventFilter<LogUserAdminRemovedEvent>;

export interface LogUserRegisteredEventObject {
  ethKey: string;
  starkKey: BigNumber;
  sender: string;
}
export type LogUserRegisteredEvent = TypedEvent<
  [string, BigNumber, string],
  LogUserRegisteredEventObject
>;

export type LogUserRegisteredEventFilter =
  TypedEventFilter<LogUserRegisteredEvent>;

export interface LogWithdrawalAllowedEventObject {
  ownerKey: BigNumber;
  assetType: BigNumber;
  nonQuantizedAmount: BigNumber;
  quantizedAmount: BigNumber;
}
export type LogWithdrawalAllowedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  LogWithdrawalAllowedEventObject
>;

export type LogWithdrawalAllowedEventFilter =
  TypedEventFilter<LogWithdrawalAllowedEvent>;

export interface LogWithdrawalPerformedEventObject {
  ownerKey: BigNumber;
  assetType: BigNumber;
  nonQuantizedAmount: BigNumber;
  quantizedAmount: BigNumber;
  recipient: string;
}
export type LogWithdrawalPerformedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string],
  LogWithdrawalPerformedEventObject
>;

export type LogWithdrawalPerformedEventFilter =
  TypedEventFilter<LogWithdrawalPerformedEvent>;

export interface LogWithdrawalWithTokenIdPerformedEventObject {
  ownerKey: BigNumber;
  assetType: BigNumber;
  tokenId: BigNumber;
  assetId: BigNumber;
  nonQuantizedAmount: BigNumber;
  quantizedAmount: BigNumber;
  recipient: string;
}
export type LogWithdrawalWithTokenIdPerformedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string],
  LogWithdrawalWithTokenIdPerformedEventObject
>;

export type LogWithdrawalWithTokenIdPerformedEventFilter =
  TypedEventFilter<LogWithdrawalWithTokenIdPerformedEvent>;

export interface Core extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEPOSIT_CANCEL_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    FREEZE_GRACE_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAIN_GOVERNANCE_INFO_TAG(overrides?: CallOverrides): Promise<[string]>;

    MAX_FORCED_ACTIONS_REQS_PER_BLOCK(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX_VERIFIER_COUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    UNFREEZE_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    VERIFIER_REMOVAL_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    announceAvailabilityVerifierRemovalIntent(
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    announceVerifierRemovalIntent(
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    applyAssetConfigurationChange(
      assetId: PromiseOrValue<BigNumberish>,
      configHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    applyGlobalConfigurationChange(
      configHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateAssetIdWithTokenId(
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateMintableAssetId(
      assetType: PromiseOrValue<BigNumberish>,
      mintingBlob: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assetId: BigNumber }>;

    configurationDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    configurationHash(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "deposit(uint256,uint256,uint256)"(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256,uint256,uint256)"(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositCancel(
      starkKey: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC1155(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC20(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositEth(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositNft(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositNftReclaim(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositReclaim(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositWithTokenId(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositWithTokenIdReclaim(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    escape(
      starkKey: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forcedTradeRequest(
      starkKeyA: PromiseOrValue<BigNumberish>,
      starkKeyB: PromiseOrValue<BigNumberish>,
      vaultIdA: PromiseOrValue<BigNumberish>,
      vaultIdB: PromiseOrValue<BigNumberish>,
      collateralAssetId: PromiseOrValue<BigNumberish>,
      syntheticAssetId: PromiseOrValue<BigNumberish>,
      amountCollateral: PromiseOrValue<BigNumberish>,
      amountSynthetic: PromiseOrValue<BigNumberish>,
      aIsBuyingSynthetic: PromiseOrValue<boolean>,
      submissionExpirationTime: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      premiumCost: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forcedWithdrawalRequest(
      starkKey: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      premiumCost: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "freezeRequest(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)"(
      starkKeyA: PromiseOrValue<BigNumberish>,
      starkKeyB: PromiseOrValue<BigNumberish>,
      vaultIdA: PromiseOrValue<BigNumberish>,
      vaultIdB: PromiseOrValue<BigNumberish>,
      collateralAssetId: PromiseOrValue<BigNumberish>,
      syntheticAssetId: PromiseOrValue<BigNumberish>,
      amountCollateral: PromiseOrValue<BigNumberish>,
      amountSynthetic: PromiseOrValue<BigNumberish>,
      aIsBuyingSynthetic: PromiseOrValue<boolean>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "freezeRequest(uint256,uint256,uint256)"(
      starkKey: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getActionHashByIndex(
      actionIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAssetInfo(
      assetType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { assetInfo: string }>;

    getCancellationRequest(
      starkKey: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { request: BigNumber }>;

    getDepositBalance(
      starkKey: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEthKey(
      ownerKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getForcedTradeRequest(
      starkKeyA: PromiseOrValue<BigNumberish>,
      starkKeyB: PromiseOrValue<BigNumberish>,
      vaultIdA: PromiseOrValue<BigNumberish>,
      vaultIdB: PromiseOrValue<BigNumberish>,
      collateralAssetId: PromiseOrValue<BigNumberish>,
      syntheticAssetId: PromiseOrValue<BigNumberish>,
      amountCollateral: PromiseOrValue<BigNumberish>,
      amountSynthetic: PromiseOrValue<BigNumberish>,
      aIsBuyingSynthetic: PromiseOrValue<boolean>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getForcedWithdrawalRequest(
      starkKey: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGlobalConfigCode(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastBatchId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOrderRoot(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOrderTreeHeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    getQuantizedDepositBalance(
      starkKey: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getQuantum(
      presumedAssetType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { quantum: BigNumber }>;

    getRegisteredAvailabilityVerifiers(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _verifers: string[] }>;

    getRegisteredVerifiers(
      overrides?: CallOverrides
    ): Promise<[string[]] & { _verifers: string[] }>;

    getRollupTreeHeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRollupVaultRoot(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSequenceNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSubContract(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSystemAssetType(overrides?: CallOverrides): Promise<[BigNumber]>;

    getValidiumTreeHeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    getValidiumVaultRoot(overrides?: CallOverrides): Promise<[BigNumber]>;

    getWithdrawalBalance(
      ownerKey: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    globalConfigurationHash(overrides?: CallOverrides): Promise<[string]>;

    handlingContractId(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { id: string }>;

    initialize(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAssetRegistered(
      assetType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAvailabilityVerifier(
      verifierAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFrozen(overrides?: CallOverrides): Promise<[boolean]>;

    isOperator(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTokenAdmin(
      testedAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isUserAdmin(
      testedAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isVerifier(
      verifierAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mainAcceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mainCancelNomination(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mainIsGovernor(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mainNominateNewGovernor(
      newGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mainRemoveGovernor(
      governorForRemoval: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerAndDepositERC20(
      ethKey: PromiseOrValue<string>,
      starkKey: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerAndDepositEth(
      ethKey: PromiseOrValue<string>,
      starkKey: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerAssetConfigurationChange(
      assetId: PromiseOrValue<BigNumberish>,
      configHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerAvailabilityVerifier(
      verifier: PromiseOrValue<string>,
      identifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerEthAddress(
      ethKey: PromiseOrValue<string>,
      starkKey: PromiseOrValue<BigNumberish>,
      starkSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerGlobalConfigurationChange(
      configHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerOperator(
      newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerSender(
      starkKey: PromiseOrValue<BigNumberish>,
      starkSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerSystemAssetType(
      assetType: PromiseOrValue<BigNumberish>,
      assetInfo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerToken(uint256,bytes)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerToken(uint256,bytes,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerTokenAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerUser(
      ethKey: PromiseOrValue<string>,
      starkKey: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerUserAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerVerifier(
      verifier: PromiseOrValue<string>,
      identifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAssetConfigurationChange(
      assetId: PromiseOrValue<BigNumberish>,
      configHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAvailabilityVerifier(
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeGlobalConfigurationChange(
      configHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeVerifier(
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unFreeze(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterOperator(
      removedOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterTokenAdmin(
      oldAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterUserAdmin(
      oldAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateState(
      programOutput: PromiseOrValue<BigNumberish>[],
      applicationData: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      ownerKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAndMint(
      ownerKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      mintingBlob: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawNft(
      ownerKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawWithTokenId(
      ownerKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEPOSIT_CANCEL_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  FREEZE_GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  MAIN_GOVERNANCE_INFO_TAG(overrides?: CallOverrides): Promise<string>;

  MAX_FORCED_ACTIONS_REQS_PER_BLOCK(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MAX_VERIFIER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

  UNFREEZE_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  VERIFIER_REMOVAL_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  announceAvailabilityVerifierRemovalIntent(
    verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  announceVerifierRemovalIntent(
    verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  applyAssetConfigurationChange(
    assetId: PromiseOrValue<BigNumberish>,
    configHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  applyGlobalConfigurationChange(
    configHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateAssetIdWithTokenId(
    assetType: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateMintableAssetId(
    assetType: PromiseOrValue<BigNumberish>,
    mintingBlob: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  configurationDelay(overrides?: CallOverrides): Promise<BigNumber>;

  configurationHash(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "deposit(uint256,uint256,uint256)"(
    starkKey: PromiseOrValue<BigNumberish>,
    assetType: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256,uint256,uint256)"(
    starkKey: PromiseOrValue<BigNumberish>,
    assetType: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    quantizedAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositCancel(
    starkKey: PromiseOrValue<BigNumberish>,
    assetId: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC1155(
    starkKey: PromiseOrValue<BigNumberish>,
    assetType: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    quantizedAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC20(
    starkKey: PromiseOrValue<BigNumberish>,
    assetType: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    quantizedAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositEth(
    starkKey: PromiseOrValue<BigNumberish>,
    assetType: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositNft(
    starkKey: PromiseOrValue<BigNumberish>,
    assetType: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositNftReclaim(
    starkKey: PromiseOrValue<BigNumberish>,
    assetType: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositReclaim(
    starkKey: PromiseOrValue<BigNumberish>,
    assetType: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositWithTokenId(
    starkKey: PromiseOrValue<BigNumberish>,
    assetType: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    quantizedAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositWithTokenIdReclaim(
    starkKey: PromiseOrValue<BigNumberish>,
    assetType: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  escape(
    starkKey: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    quantizedAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forcedTradeRequest(
    starkKeyA: PromiseOrValue<BigNumberish>,
    starkKeyB: PromiseOrValue<BigNumberish>,
    vaultIdA: PromiseOrValue<BigNumberish>,
    vaultIdB: PromiseOrValue<BigNumberish>,
    collateralAssetId: PromiseOrValue<BigNumberish>,
    syntheticAssetId: PromiseOrValue<BigNumberish>,
    amountCollateral: PromiseOrValue<BigNumberish>,
    amountSynthetic: PromiseOrValue<BigNumberish>,
    aIsBuyingSynthetic: PromiseOrValue<boolean>,
    submissionExpirationTime: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    premiumCost: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forcedWithdrawalRequest(
    starkKey: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    quantizedAmount: PromiseOrValue<BigNumberish>,
    premiumCost: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "freezeRequest(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)"(
    starkKeyA: PromiseOrValue<BigNumberish>,
    starkKeyB: PromiseOrValue<BigNumberish>,
    vaultIdA: PromiseOrValue<BigNumberish>,
    vaultIdB: PromiseOrValue<BigNumberish>,
    collateralAssetId: PromiseOrValue<BigNumberish>,
    syntheticAssetId: PromiseOrValue<BigNumberish>,
    amountCollateral: PromiseOrValue<BigNumberish>,
    amountSynthetic: PromiseOrValue<BigNumberish>,
    aIsBuyingSynthetic: PromiseOrValue<boolean>,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "freezeRequest(uint256,uint256,uint256)"(
    starkKey: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    quantizedAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActionCount(overrides?: CallOverrides): Promise<BigNumber>;

  getActionHashByIndex(
    actionIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAssetInfo(
    assetType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getCancellationRequest(
    starkKey: PromiseOrValue<BigNumberish>,
    assetId: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepositBalance(
    starkKey: PromiseOrValue<BigNumberish>,
    assetId: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEthKey(
    ownerKey: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getForcedTradeRequest(
    starkKeyA: PromiseOrValue<BigNumberish>,
    starkKeyB: PromiseOrValue<BigNumberish>,
    vaultIdA: PromiseOrValue<BigNumberish>,
    vaultIdB: PromiseOrValue<BigNumberish>,
    collateralAssetId: PromiseOrValue<BigNumberish>,
    syntheticAssetId: PromiseOrValue<BigNumberish>,
    amountCollateral: PromiseOrValue<BigNumberish>,
    amountSynthetic: PromiseOrValue<BigNumberish>,
    aIsBuyingSynthetic: PromiseOrValue<boolean>,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getForcedWithdrawalRequest(
    starkKey: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    quantizedAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGlobalConfigCode(overrides?: CallOverrides): Promise<BigNumber>;

  getLastBatchId(overrides?: CallOverrides): Promise<BigNumber>;

  getOrderRoot(overrides?: CallOverrides): Promise<BigNumber>;

  getOrderTreeHeight(overrides?: CallOverrides): Promise<BigNumber>;

  getQuantizedDepositBalance(
    starkKey: PromiseOrValue<BigNumberish>,
    assetId: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getQuantum(
    presumedAssetType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRegisteredAvailabilityVerifiers(
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRegisteredVerifiers(overrides?: CallOverrides): Promise<string[]>;

  getRollupTreeHeight(overrides?: CallOverrides): Promise<BigNumber>;

  getRollupVaultRoot(overrides?: CallOverrides): Promise<BigNumber>;

  getSequenceNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getSubContract(
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSystemAssetType(overrides?: CallOverrides): Promise<BigNumber>;

  getValidiumTreeHeight(overrides?: CallOverrides): Promise<BigNumber>;

  getValidiumVaultRoot(overrides?: CallOverrides): Promise<BigNumber>;

  getWithdrawalBalance(
    ownerKey: PromiseOrValue<BigNumberish>,
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  globalConfigurationHash(overrides?: CallOverrides): Promise<string>;

  handlingContractId(
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAssetRegistered(
    assetType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAvailabilityVerifier(
    verifierAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFrozen(overrides?: CallOverrides): Promise<boolean>;

  isOperator(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTokenAdmin(
    testedAdmin: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isUserAdmin(
    testedAdmin: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVerifier(
    verifierAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mainAcceptGovernance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mainCancelNomination(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mainIsGovernor(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mainNominateNewGovernor(
    newGovernor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mainRemoveGovernor(
    governorForRemoval: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    operator: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerAndDepositERC20(
    ethKey: PromiseOrValue<string>,
    starkKey: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    assetType: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    quantizedAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerAndDepositEth(
    ethKey: PromiseOrValue<string>,
    starkKey: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    assetType: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerAssetConfigurationChange(
    assetId: PromiseOrValue<BigNumberish>,
    configHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerAvailabilityVerifier(
    verifier: PromiseOrValue<string>,
    identifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerEthAddress(
    ethKey: PromiseOrValue<string>,
    starkKey: PromiseOrValue<BigNumberish>,
    starkSignature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerGlobalConfigurationChange(
    configHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerOperator(
    newOperator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerSender(
    starkKey: PromiseOrValue<BigNumberish>,
    starkSignature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerSystemAssetType(
    assetType: PromiseOrValue<BigNumberish>,
    assetInfo: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerToken(uint256,bytes)"(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerToken(uint256,bytes,uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BytesLike>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerTokenAdmin(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerUser(
    ethKey: PromiseOrValue<string>,
    starkKey: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerUserAdmin(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerVerifier(
    verifier: PromiseOrValue<string>,
    identifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAssetConfigurationChange(
    assetId: PromiseOrValue<BigNumberish>,
    configHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAvailabilityVerifier(
    verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeGlobalConfigurationChange(
    configHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeVerifier(
    verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unFreeze(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterOperator(
    removedOperator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterTokenAdmin(
    oldAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterUserAdmin(
    oldAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateState(
    programOutput: PromiseOrValue<BigNumberish>[],
    applicationData: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    ownerKey: PromiseOrValue<BigNumberish>,
    assetType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAndMint(
    ownerKey: PromiseOrValue<BigNumberish>,
    assetType: PromiseOrValue<BigNumberish>,
    mintingBlob: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawNft(
    ownerKey: PromiseOrValue<BigNumberish>,
    assetType: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawWithTokenId(
    ownerKey: PromiseOrValue<BigNumberish>,
    assetType: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEPOSIT_CANCEL_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    FREEZE_GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MAIN_GOVERNANCE_INFO_TAG(overrides?: CallOverrides): Promise<string>;

    MAX_FORCED_ACTIONS_REQS_PER_BLOCK(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_VERIFIER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    UNFREEZE_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    VERIFIER_REMOVAL_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    announceAvailabilityVerifierRemovalIntent(
      verifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    announceVerifierRemovalIntent(
      verifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    applyAssetConfigurationChange(
      assetId: PromiseOrValue<BigNumberish>,
      configHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    applyGlobalConfigurationChange(
      configHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateAssetIdWithTokenId(
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateMintableAssetId(
      assetType: PromiseOrValue<BigNumberish>,
      mintingBlob: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configurationDelay(overrides?: CallOverrides): Promise<BigNumber>;

    configurationHash(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "deposit(uint256,uint256,uint256)"(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256,uint256,uint256)"(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCancel(
      starkKey: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC1155(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC20(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositEth(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositNft(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositNftReclaim(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositReclaim(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositWithTokenId(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositWithTokenIdReclaim(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    escape(
      starkKey: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    forcedTradeRequest(
      starkKeyA: PromiseOrValue<BigNumberish>,
      starkKeyB: PromiseOrValue<BigNumberish>,
      vaultIdA: PromiseOrValue<BigNumberish>,
      vaultIdB: PromiseOrValue<BigNumberish>,
      collateralAssetId: PromiseOrValue<BigNumberish>,
      syntheticAssetId: PromiseOrValue<BigNumberish>,
      amountCollateral: PromiseOrValue<BigNumberish>,
      amountSynthetic: PromiseOrValue<BigNumberish>,
      aIsBuyingSynthetic: PromiseOrValue<boolean>,
      submissionExpirationTime: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      premiumCost: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    forcedWithdrawalRequest(
      starkKey: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      premiumCost: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "freezeRequest(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)"(
      starkKeyA: PromiseOrValue<BigNumberish>,
      starkKeyB: PromiseOrValue<BigNumberish>,
      vaultIdA: PromiseOrValue<BigNumberish>,
      vaultIdB: PromiseOrValue<BigNumberish>,
      collateralAssetId: PromiseOrValue<BigNumberish>,
      syntheticAssetId: PromiseOrValue<BigNumberish>,
      amountCollateral: PromiseOrValue<BigNumberish>,
      amountSynthetic: PromiseOrValue<BigNumberish>,
      aIsBuyingSynthetic: PromiseOrValue<boolean>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "freezeRequest(uint256,uint256,uint256)"(
      starkKey: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getActionCount(overrides?: CallOverrides): Promise<BigNumber>;

    getActionHashByIndex(
      actionIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAssetInfo(
      assetType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCancellationRequest(
      starkKey: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositBalance(
      starkKey: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthKey(
      ownerKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getForcedTradeRequest(
      starkKeyA: PromiseOrValue<BigNumberish>,
      starkKeyB: PromiseOrValue<BigNumberish>,
      vaultIdA: PromiseOrValue<BigNumberish>,
      vaultIdB: PromiseOrValue<BigNumberish>,
      collateralAssetId: PromiseOrValue<BigNumberish>,
      syntheticAssetId: PromiseOrValue<BigNumberish>,
      amountCollateral: PromiseOrValue<BigNumberish>,
      amountSynthetic: PromiseOrValue<BigNumberish>,
      aIsBuyingSynthetic: PromiseOrValue<boolean>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getForcedWithdrawalRequest(
      starkKey: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlobalConfigCode(overrides?: CallOverrides): Promise<BigNumber>;

    getLastBatchId(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderTreeHeight(overrides?: CallOverrides): Promise<BigNumber>;

    getQuantizedDepositBalance(
      starkKey: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuantum(
      presumedAssetType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisteredAvailabilityVerifiers(
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRegisteredVerifiers(overrides?: CallOverrides): Promise<string[]>;

    getRollupTreeHeight(overrides?: CallOverrides): Promise<BigNumber>;

    getRollupVaultRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getSequenceNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getSubContract(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSystemAssetType(overrides?: CallOverrides): Promise<BigNumber>;

    getValidiumTreeHeight(overrides?: CallOverrides): Promise<BigNumber>;

    getValidiumVaultRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawalBalance(
      ownerKey: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalConfigurationHash(overrides?: CallOverrides): Promise<string>;

    handlingContractId(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    isAssetRegistered(
      assetType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAvailabilityVerifier(
      verifierAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFrozen(overrides?: CallOverrides): Promise<boolean>;

    isOperator(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTokenAdmin(
      testedAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isUserAdmin(
      testedAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVerifier(
      verifierAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mainAcceptGovernance(overrides?: CallOverrides): Promise<void>;

    mainCancelNomination(overrides?: CallOverrides): Promise<void>;

    mainIsGovernor(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mainNominateNewGovernor(
      newGovernor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    mainRemoveGovernor(
      governorForRemoval: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerAndDepositERC20(
      ethKey: PromiseOrValue<string>,
      starkKey: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerAndDepositEth(
      ethKey: PromiseOrValue<string>,
      starkKey: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerAssetConfigurationChange(
      assetId: PromiseOrValue<BigNumberish>,
      configHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerAvailabilityVerifier(
      verifier: PromiseOrValue<string>,
      identifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerEthAddress(
      ethKey: PromiseOrValue<string>,
      starkKey: PromiseOrValue<BigNumberish>,
      starkSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerGlobalConfigurationChange(
      configHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerOperator(
      newOperator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerSender(
      starkKey: PromiseOrValue<BigNumberish>,
      starkSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerSystemAssetType(
      assetType: PromiseOrValue<BigNumberish>,
      assetInfo: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerToken(uint256,bytes)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerToken(uint256,bytes,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerTokenAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerUser(
      ethKey: PromiseOrValue<string>,
      starkKey: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerUserAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerVerifier(
      verifier: PromiseOrValue<string>,
      identifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAssetConfigurationChange(
      assetId: PromiseOrValue<BigNumberish>,
      configHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAvailabilityVerifier(
      verifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeGlobalConfigurationChange(
      configHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeVerifier(
      verifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unFreeze(overrides?: CallOverrides): Promise<void>;

    unregisterOperator(
      removedOperator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterTokenAdmin(
      oldAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterUserAdmin(
      oldAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateState(
      programOutput: PromiseOrValue<BigNumberish>[],
      applicationData: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      ownerKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAndMint(
      ownerKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      mintingBlob: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNft(
      ownerKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawWithTokenId(
      ownerKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogAssetConfigurationApplied(uint256,bytes32)"(
      assetId?: null,
      configHash?: null
    ): LogAssetConfigurationAppliedEventFilter;
    LogAssetConfigurationApplied(
      assetId?: null,
      configHash?: null
    ): LogAssetConfigurationAppliedEventFilter;

    "LogAssetConfigurationRegistered(uint256,bytes32)"(
      assetId?: null,
      configHash?: null
    ): LogAssetConfigurationRegisteredEventFilter;
    LogAssetConfigurationRegistered(
      assetId?: null,
      configHash?: null
    ): LogAssetConfigurationRegisteredEventFilter;

    "LogAssetConfigurationRemoved(uint256,bytes32)"(
      assetId?: null,
      configHash?: null
    ): LogAssetConfigurationRemovedEventFilter;
    LogAssetConfigurationRemoved(
      assetId?: null,
      configHash?: null
    ): LogAssetConfigurationRemovedEventFilter;

    "LogAssetWithdrawalAllowed(uint256,uint256,uint256)"(
      ownerKey?: null,
      assetId?: null,
      quantizedAmount?: null
    ): LogAssetWithdrawalAllowedEventFilter;
    LogAssetWithdrawalAllowed(
      ownerKey?: null,
      assetId?: null,
      quantizedAmount?: null
    ): LogAssetWithdrawalAllowedEventFilter;

    "LogDeposit(address,uint256,uint256,uint256,uint256,uint256)"(
      depositorEthKey?: null,
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogDepositEventFilter;
    LogDeposit(
      depositorEthKey?: null,
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogDepositEventFilter;

    "LogDepositCancel(uint256,uint256,uint256)"(
      starkKey?: null,
      vaultId?: null,
      assetId?: null
    ): LogDepositCancelEventFilter;
    LogDepositCancel(
      starkKey?: null,
      vaultId?: null,
      assetId?: null
    ): LogDepositCancelEventFilter;

    "LogDepositCancelReclaimed(uint256,uint256,uint256,uint256,uint256)"(
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogDepositCancelReclaimedEventFilter;
    LogDepositCancelReclaimed(
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogDepositCancelReclaimedEventFilter;

    "LogDepositNftCancelReclaimed(uint256,uint256,uint256,uint256,uint256)"(
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null
    ): LogDepositNftCancelReclaimedEventFilter;
    LogDepositNftCancelReclaimed(
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null
    ): LogDepositNftCancelReclaimedEventFilter;

    "LogDepositWithTokenId(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      depositorEthKey?: null,
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogDepositWithTokenIdEventFilter;
    LogDepositWithTokenId(
      depositorEthKey?: null,
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogDepositWithTokenIdEventFilter;

    "LogDepositWithTokenIdCancelReclaimed(uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogDepositWithTokenIdCancelReclaimedEventFilter;
    LogDepositWithTokenIdCancelReclaimed(
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogDepositWithTokenIdCancelReclaimedEventFilter;

    "LogForcedTradeRequest(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)"(
      starkKeyA?: null,
      starkKeyB?: null,
      vaultIdA?: null,
      vaultIdB?: null,
      collateralAssetId?: null,
      syntheticAssetId?: null,
      amountCollateral?: null,
      amountSynthetic?: null,
      aIsBuyingSynthetic?: null,
      nonce?: null
    ): LogForcedTradeRequestEventFilter;
    LogForcedTradeRequest(
      starkKeyA?: null,
      starkKeyB?: null,
      vaultIdA?: null,
      vaultIdB?: null,
      collateralAssetId?: null,
      syntheticAssetId?: null,
      amountCollateral?: null,
      amountSynthetic?: null,
      aIsBuyingSynthetic?: null,
      nonce?: null
    ): LogForcedTradeRequestEventFilter;

    "LogForcedWithdrawalRequest(uint256,uint256,uint256)"(
      starkKey?: null,
      vaultId?: null,
      quantizedAmount?: null
    ): LogForcedWithdrawalRequestEventFilter;
    LogForcedWithdrawalRequest(
      starkKey?: null,
      vaultId?: null,
      quantizedAmount?: null
    ): LogForcedWithdrawalRequestEventFilter;

    "LogFrozen()"(): LogFrozenEventFilter;
    LogFrozen(): LogFrozenEventFilter;

    "LogGlobalConfigurationApplied(bytes32)"(
      configHash?: null
    ): LogGlobalConfigurationAppliedEventFilter;
    LogGlobalConfigurationApplied(
      configHash?: null
    ): LogGlobalConfigurationAppliedEventFilter;

    "LogGlobalConfigurationRegistered(bytes32)"(
      configHash?: null
    ): LogGlobalConfigurationRegisteredEventFilter;
    LogGlobalConfigurationRegistered(
      configHash?: null
    ): LogGlobalConfigurationRegisteredEventFilter;

    "LogGlobalConfigurationRemoved(bytes32)"(
      configHash?: null
    ): LogGlobalConfigurationRemovedEventFilter;
    LogGlobalConfigurationRemoved(
      configHash?: null
    ): LogGlobalConfigurationRemovedEventFilter;

    "LogMintWithdrawalPerformed(uint256,uint256,uint256,uint256,uint256)"(
      ownerKey?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null,
      assetId?: null
    ): LogMintWithdrawalPerformedEventFilter;
    LogMintWithdrawalPerformed(
      ownerKey?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null,
      assetId?: null
    ): LogMintWithdrawalPerformedEventFilter;

    "LogMintableWithdrawalAllowed(uint256,uint256,uint256)"(
      ownerKey?: null,
      assetId?: null,
      quantizedAmount?: null
    ): LogMintableWithdrawalAllowedEventFilter;
    LogMintableWithdrawalAllowed(
      ownerKey?: null,
      assetId?: null,
      quantizedAmount?: null
    ): LogMintableWithdrawalAllowedEventFilter;

    "LogNewGovernorAccepted(address)"(
      acceptedGovernor?: null
    ): LogNewGovernorAcceptedEventFilter;
    LogNewGovernorAccepted(
      acceptedGovernor?: null
    ): LogNewGovernorAcceptedEventFilter;

    "LogNftDeposit(address,uint256,uint256,uint256,uint256,uint256)"(
      depositorEthKey?: null,
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null
    ): LogNftDepositEventFilter;
    LogNftDeposit(
      depositorEthKey?: null,
      starkKey?: null,
      vaultId?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null
    ): LogNftDepositEventFilter;

    "LogNftWithdrawalAllowed(uint256,uint256)"(
      ownerKey?: null,
      assetId?: null
    ): LogNftWithdrawalAllowedEventFilter;
    LogNftWithdrawalAllowed(
      ownerKey?: null,
      assetId?: null
    ): LogNftWithdrawalAllowedEventFilter;

    "LogNftWithdrawalPerformed(uint256,uint256,uint256,uint256,address)"(
      ownerKey?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null,
      recipient?: null
    ): LogNftWithdrawalPerformedEventFilter;
    LogNftWithdrawalPerformed(
      ownerKey?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null,
      recipient?: null
    ): LogNftWithdrawalPerformedEventFilter;

    "LogNominatedGovernor(address)"(
      nominatedGovernor?: null
    ): LogNominatedGovernorEventFilter;
    LogNominatedGovernor(
      nominatedGovernor?: null
    ): LogNominatedGovernorEventFilter;

    "LogNominationCancelled()"(): LogNominationCancelledEventFilter;
    LogNominationCancelled(): LogNominationCancelledEventFilter;

    "LogOperatorAdded(address)"(operator?: null): LogOperatorAddedEventFilter;
    LogOperatorAdded(operator?: null): LogOperatorAddedEventFilter;

    "LogOperatorRemoved(address)"(
      operator?: null
    ): LogOperatorRemovedEventFilter;
    LogOperatorRemoved(operator?: null): LogOperatorRemovedEventFilter;

    "LogRegistered(address,string)"(
      entry?: null,
      entryId?: null
    ): LogRegisteredEventFilter;
    LogRegistered(entry?: null, entryId?: null): LogRegisteredEventFilter;

    "LogRemovalIntent(address,string)"(
      entry?: null,
      entryId?: null
    ): LogRemovalIntentEventFilter;
    LogRemovalIntent(entry?: null, entryId?: null): LogRemovalIntentEventFilter;

    "LogRemoved(address,string)"(
      entry?: null,
      entryId?: null
    ): LogRemovedEventFilter;
    LogRemoved(entry?: null, entryId?: null): LogRemovedEventFilter;

    "LogRemovedGovernor(address)"(
      removedGovernor?: null
    ): LogRemovedGovernorEventFilter;
    LogRemovedGovernor(removedGovernor?: null): LogRemovedGovernorEventFilter;

    "LogStateTransitionFact(bytes32)"(
      stateTransitionFact?: null
    ): LogStateTransitionFactEventFilter;
    LogStateTransitionFact(
      stateTransitionFact?: null
    ): LogStateTransitionFactEventFilter;

    "LogSystemAssetType(uint256)"(
      assetType?: null
    ): LogSystemAssetTypeEventFilter;
    LogSystemAssetType(assetType?: null): LogSystemAssetTypeEventFilter;

    "LogTokenAdminAdded(address)"(
      tokenAdmin?: null
    ): LogTokenAdminAddedEventFilter;
    LogTokenAdminAdded(tokenAdmin?: null): LogTokenAdminAddedEventFilter;

    "LogTokenAdminRemoved(address)"(
      tokenAdmin?: null
    ): LogTokenAdminRemovedEventFilter;
    LogTokenAdminRemoved(tokenAdmin?: null): LogTokenAdminRemovedEventFilter;

    "LogTokenRegistered(uint256,bytes,uint256)"(
      assetType?: null,
      assetInfo?: null,
      quantum?: null
    ): LogTokenRegisteredEventFilter;
    LogTokenRegistered(
      assetType?: null,
      assetInfo?: null,
      quantum?: null
    ): LogTokenRegisteredEventFilter;

    "LogUnFrozen()"(): LogUnFrozenEventFilter;
    LogUnFrozen(): LogUnFrozenEventFilter;

    "LogUpdateState(uint256,uint256)"(
      sequenceNumber?: null,
      batchId?: null
    ): LogUpdateStateEventFilter;
    LogUpdateState(
      sequenceNumber?: null,
      batchId?: null
    ): LogUpdateStateEventFilter;

    "LogUserAdminAdded(address)"(
      userAdmin?: null
    ): LogUserAdminAddedEventFilter;
    LogUserAdminAdded(userAdmin?: null): LogUserAdminAddedEventFilter;

    "LogUserAdminRemoved(address)"(
      userAdmin?: null
    ): LogUserAdminRemovedEventFilter;
    LogUserAdminRemoved(userAdmin?: null): LogUserAdminRemovedEventFilter;

    "LogUserRegistered(address,uint256,address)"(
      ethKey?: null,
      starkKey?: null,
      sender?: null
    ): LogUserRegisteredEventFilter;
    LogUserRegistered(
      ethKey?: null,
      starkKey?: null,
      sender?: null
    ): LogUserRegisteredEventFilter;

    "LogWithdrawalAllowed(uint256,uint256,uint256,uint256)"(
      ownerKey?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogWithdrawalAllowedEventFilter;
    LogWithdrawalAllowed(
      ownerKey?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null
    ): LogWithdrawalAllowedEventFilter;

    "LogWithdrawalPerformed(uint256,uint256,uint256,uint256,address)"(
      ownerKey?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null,
      recipient?: null
    ): LogWithdrawalPerformedEventFilter;
    LogWithdrawalPerformed(
      ownerKey?: null,
      assetType?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null,
      recipient?: null
    ): LogWithdrawalPerformedEventFilter;

    "LogWithdrawalWithTokenIdPerformed(uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      ownerKey?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null,
      recipient?: null
    ): LogWithdrawalWithTokenIdPerformedEventFilter;
    LogWithdrawalWithTokenIdPerformed(
      ownerKey?: null,
      assetType?: null,
      tokenId?: null,
      assetId?: null,
      nonQuantizedAmount?: null,
      quantizedAmount?: null,
      recipient?: null
    ): LogWithdrawalWithTokenIdPerformedEventFilter;
  };

  estimateGas: {
    DEPOSIT_CANCEL_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    FREEZE_GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MAIN_GOVERNANCE_INFO_TAG(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FORCED_ACTIONS_REQS_PER_BLOCK(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_VERIFIER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    UNFREEZE_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    VERIFIER_REMOVAL_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    announceAvailabilityVerifierRemovalIntent(
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    announceVerifierRemovalIntent(
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    applyAssetConfigurationChange(
      assetId: PromiseOrValue<BigNumberish>,
      configHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    applyGlobalConfigurationChange(
      configHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateAssetIdWithTokenId(
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateMintableAssetId(
      assetType: PromiseOrValue<BigNumberish>,
      mintingBlob: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configurationDelay(overrides?: CallOverrides): Promise<BigNumber>;

    configurationHash(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deposit(uint256,uint256,uint256)"(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deposit(uint256,uint256,uint256,uint256)"(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositCancel(
      starkKey: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC1155(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC20(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositEth(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositNft(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositNftReclaim(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositReclaim(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositWithTokenId(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositWithTokenIdReclaim(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    escape(
      starkKey: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forcedTradeRequest(
      starkKeyA: PromiseOrValue<BigNumberish>,
      starkKeyB: PromiseOrValue<BigNumberish>,
      vaultIdA: PromiseOrValue<BigNumberish>,
      vaultIdB: PromiseOrValue<BigNumberish>,
      collateralAssetId: PromiseOrValue<BigNumberish>,
      syntheticAssetId: PromiseOrValue<BigNumberish>,
      amountCollateral: PromiseOrValue<BigNumberish>,
      amountSynthetic: PromiseOrValue<BigNumberish>,
      aIsBuyingSynthetic: PromiseOrValue<boolean>,
      submissionExpirationTime: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      premiumCost: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forcedWithdrawalRequest(
      starkKey: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      premiumCost: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "freezeRequest(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)"(
      starkKeyA: PromiseOrValue<BigNumberish>,
      starkKeyB: PromiseOrValue<BigNumberish>,
      vaultIdA: PromiseOrValue<BigNumberish>,
      vaultIdB: PromiseOrValue<BigNumberish>,
      collateralAssetId: PromiseOrValue<BigNumberish>,
      syntheticAssetId: PromiseOrValue<BigNumberish>,
      amountCollateral: PromiseOrValue<BigNumberish>,
      amountSynthetic: PromiseOrValue<BigNumberish>,
      aIsBuyingSynthetic: PromiseOrValue<boolean>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "freezeRequest(uint256,uint256,uint256)"(
      starkKey: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActionCount(overrides?: CallOverrides): Promise<BigNumber>;

    getActionHashByIndex(
      actionIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetInfo(
      assetType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCancellationRequest(
      starkKey: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositBalance(
      starkKey: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthKey(
      ownerKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getForcedTradeRequest(
      starkKeyA: PromiseOrValue<BigNumberish>,
      starkKeyB: PromiseOrValue<BigNumberish>,
      vaultIdA: PromiseOrValue<BigNumberish>,
      vaultIdB: PromiseOrValue<BigNumberish>,
      collateralAssetId: PromiseOrValue<BigNumberish>,
      syntheticAssetId: PromiseOrValue<BigNumberish>,
      amountCollateral: PromiseOrValue<BigNumberish>,
      amountSynthetic: PromiseOrValue<BigNumberish>,
      aIsBuyingSynthetic: PromiseOrValue<boolean>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getForcedWithdrawalRequest(
      starkKey: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlobalConfigCode(overrides?: CallOverrides): Promise<BigNumber>;

    getLastBatchId(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderTreeHeight(overrides?: CallOverrides): Promise<BigNumber>;

    getQuantizedDepositBalance(
      starkKey: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuantum(
      presumedAssetType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisteredAvailabilityVerifiers(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisteredVerifiers(overrides?: CallOverrides): Promise<BigNumber>;

    getRollupTreeHeight(overrides?: CallOverrides): Promise<BigNumber>;

    getRollupVaultRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getSequenceNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getSubContract(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSystemAssetType(overrides?: CallOverrides): Promise<BigNumber>;

    getValidiumTreeHeight(overrides?: CallOverrides): Promise<BigNumber>;

    getValidiumVaultRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawalBalance(
      ownerKey: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalConfigurationHash(overrides?: CallOverrides): Promise<BigNumber>;

    handlingContractId(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAssetRegistered(
      assetType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAvailabilityVerifier(
      verifierAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFrozen(overrides?: CallOverrides): Promise<BigNumber>;

    isOperator(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenAdmin(
      testedAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUserAdmin(
      testedAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVerifier(
      verifierAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mainAcceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mainCancelNomination(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mainIsGovernor(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mainNominateNewGovernor(
      newGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mainRemoveGovernor(
      governorForRemoval: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerAndDepositERC20(
      ethKey: PromiseOrValue<string>,
      starkKey: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerAndDepositEth(
      ethKey: PromiseOrValue<string>,
      starkKey: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerAssetConfigurationChange(
      assetId: PromiseOrValue<BigNumberish>,
      configHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerAvailabilityVerifier(
      verifier: PromiseOrValue<string>,
      identifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerEthAddress(
      ethKey: PromiseOrValue<string>,
      starkKey: PromiseOrValue<BigNumberish>,
      starkSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerGlobalConfigurationChange(
      configHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerOperator(
      newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerSender(
      starkKey: PromiseOrValue<BigNumberish>,
      starkSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerSystemAssetType(
      assetType: PromiseOrValue<BigNumberish>,
      assetInfo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerToken(uint256,bytes)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerToken(uint256,bytes,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerTokenAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerUser(
      ethKey: PromiseOrValue<string>,
      starkKey: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerUserAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerVerifier(
      verifier: PromiseOrValue<string>,
      identifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAssetConfigurationChange(
      assetId: PromiseOrValue<BigNumberish>,
      configHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAvailabilityVerifier(
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeGlobalConfigurationChange(
      configHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeVerifier(
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unFreeze(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterOperator(
      removedOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterTokenAdmin(
      oldAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterUserAdmin(
      oldAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateState(
      programOutput: PromiseOrValue<BigNumberish>[],
      applicationData: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      ownerKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAndMint(
      ownerKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      mintingBlob: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawNft(
      ownerKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawWithTokenId(
      ownerKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEPOSIT_CANCEL_DELAY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FREEZE_GRACE_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAIN_GOVERNANCE_INFO_TAG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_FORCED_ACTIONS_REQS_PER_BLOCK(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_VERIFIER_COUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UNFREEZE_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERIFIER_REMOVAL_DELAY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    announceAvailabilityVerifierRemovalIntent(
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    announceVerifierRemovalIntent(
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    applyAssetConfigurationChange(
      assetId: PromiseOrValue<BigNumberish>,
      configHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    applyGlobalConfigurationChange(
      configHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateAssetIdWithTokenId(
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateMintableAssetId(
      assetType: PromiseOrValue<BigNumberish>,
      mintingBlob: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    configurationDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    configurationHash(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256,uint256)"(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256,uint256,uint256)"(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositCancel(
      starkKey: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC1155(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC20(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositEth(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositNft(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositNftReclaim(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositReclaim(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositWithTokenId(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositWithTokenIdReclaim(
      starkKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    escape(
      starkKey: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forcedTradeRequest(
      starkKeyA: PromiseOrValue<BigNumberish>,
      starkKeyB: PromiseOrValue<BigNumberish>,
      vaultIdA: PromiseOrValue<BigNumberish>,
      vaultIdB: PromiseOrValue<BigNumberish>,
      collateralAssetId: PromiseOrValue<BigNumberish>,
      syntheticAssetId: PromiseOrValue<BigNumberish>,
      amountCollateral: PromiseOrValue<BigNumberish>,
      amountSynthetic: PromiseOrValue<BigNumberish>,
      aIsBuyingSynthetic: PromiseOrValue<boolean>,
      submissionExpirationTime: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      premiumCost: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forcedWithdrawalRequest(
      starkKey: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      premiumCost: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "freezeRequest(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)"(
      starkKeyA: PromiseOrValue<BigNumberish>,
      starkKeyB: PromiseOrValue<BigNumberish>,
      vaultIdA: PromiseOrValue<BigNumberish>,
      vaultIdB: PromiseOrValue<BigNumberish>,
      collateralAssetId: PromiseOrValue<BigNumberish>,
      syntheticAssetId: PromiseOrValue<BigNumberish>,
      amountCollateral: PromiseOrValue<BigNumberish>,
      amountSynthetic: PromiseOrValue<BigNumberish>,
      aIsBuyingSynthetic: PromiseOrValue<boolean>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "freezeRequest(uint256,uint256,uint256)"(
      starkKey: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getActionHashByIndex(
      actionIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetInfo(
      assetType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCancellationRequest(
      starkKey: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositBalance(
      starkKey: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEthKey(
      ownerKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getForcedTradeRequest(
      starkKeyA: PromiseOrValue<BigNumberish>,
      starkKeyB: PromiseOrValue<BigNumberish>,
      vaultIdA: PromiseOrValue<BigNumberish>,
      vaultIdB: PromiseOrValue<BigNumberish>,
      collateralAssetId: PromiseOrValue<BigNumberish>,
      syntheticAssetId: PromiseOrValue<BigNumberish>,
      amountCollateral: PromiseOrValue<BigNumberish>,
      amountSynthetic: PromiseOrValue<BigNumberish>,
      aIsBuyingSynthetic: PromiseOrValue<boolean>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getForcedWithdrawalRequest(
      starkKey: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlobalConfigCode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastBatchId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrderRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrderTreeHeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuantizedDepositBalance(
      starkKey: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuantum(
      presumedAssetType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisteredAvailabilityVerifiers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisteredVerifiers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRollupTreeHeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRollupVaultRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSequenceNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSubContract(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSystemAssetType(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidiumTreeHeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidiumVaultRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalBalance(
      ownerKey: PromiseOrValue<BigNumberish>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalConfigurationHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handlingContractId(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAssetRegistered(
      assetType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAvailabilityVerifier(
      verifierAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFrozen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOperator(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenAdmin(
      testedAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUserAdmin(
      testedAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVerifier(
      verifierAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mainAcceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mainCancelNomination(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mainIsGovernor(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mainNominateNewGovernor(
      newGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mainRemoveGovernor(
      governorForRemoval: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerAndDepositERC20(
      ethKey: PromiseOrValue<string>,
      starkKey: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      quantizedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerAndDepositEth(
      ethKey: PromiseOrValue<string>,
      starkKey: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      assetType: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerAssetConfigurationChange(
      assetId: PromiseOrValue<BigNumberish>,
      configHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerAvailabilityVerifier(
      verifier: PromiseOrValue<string>,
      identifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerEthAddress(
      ethKey: PromiseOrValue<string>,
      starkKey: PromiseOrValue<BigNumberish>,
      starkSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerGlobalConfigurationChange(
      configHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerOperator(
      newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerSender(
      starkKey: PromiseOrValue<BigNumberish>,
      starkSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerSystemAssetType(
      assetType: PromiseOrValue<BigNumberish>,
      assetInfo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerToken(uint256,bytes)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerToken(uint256,bytes,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerTokenAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerUser(
      ethKey: PromiseOrValue<string>,
      starkKey: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerUserAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerVerifier(
      verifier: PromiseOrValue<string>,
      identifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAssetConfigurationChange(
      assetId: PromiseOrValue<BigNumberish>,
      configHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAvailabilityVerifier(
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeGlobalConfigurationChange(
      configHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeVerifier(
      verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unFreeze(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterOperator(
      removedOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterTokenAdmin(
      oldAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterUserAdmin(
      oldAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateState(
      programOutput: PromiseOrValue<BigNumberish>[],
      applicationData: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      ownerKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAndMint(
      ownerKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      mintingBlob: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNft(
      ownerKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawWithTokenId(
      ownerKey: PromiseOrValue<BigNumberish>,
      assetType: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
